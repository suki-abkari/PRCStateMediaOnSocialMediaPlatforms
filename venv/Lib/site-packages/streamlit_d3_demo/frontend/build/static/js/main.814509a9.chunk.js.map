{"version":3,"sources":["D3Component.module.css","streamlit/streamlit.ts","streamlit/ArrowTable.ts","streamlit/StreamlitReact.tsx","D3Component.tsx","index.tsx"],"names":["module","exports","ComponentMessageType","ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","styles","undefined","schema","fields","typeId","nanos","Date","length","numCols","rows","dataRows","columns","dataColumns","Streamlit","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","key","toArrowTable","Object","fromEntries","df","index","parent","postMessage","isStreamlitMessage","React","PureComponent","buildScales","svgWidth","svgHeight","margin","d3","domain","d","range","left","right","bottom","top","withStreamlitConnection","WrappedComponent","ComponentWrapper","props","componentDidMount","onRenderEvent","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","state","componentError","message","width","innerWidth","getDerivedStateFromError","hoistNonReactStatics","svgRef","useRef","circleRadius","circleColor","useEffect","svgElement","current","append","classed","xScale","yScale","select","call","g","attr","transition","duration","selectAll","enter","circle","el","on","i","ns","x","y","style","text","_","update","exit","dispatch","transitionMillisec","remove","line","className","tooltip","hidden","viewBox","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.814509a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"D3Component_circle__-s-L0\",\"tooltip\":\"D3Component_tooltip__3ugwD\"};","/**\n * @license\n * Copyright 2018-2020 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\"\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\n\n/** Data sent in the custom Streamlit render event. */\nexport interface RenderData {\n  args: any\n  disabled: boolean\n}\n\n/** Messages from Component -> Streamlit */\nenum ComponentMessageType {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  COMPONENT_READY = \"streamlit:componentReady\",\n\n  // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\n}\n\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport class Streamlit {\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n  public static readonly API_VERSION = 1\n\n  public static readonly RENDER_EVENT = \"streamlit:render\"\n\n  /** Dispatches events received from Streamlit. */\n  public static readonly events = new EventTarget()\n\n  private static registeredMessageListener = false\n  private static lastFrameHeight?: number\n\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n  public static setComponentReady = (): void => {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\n      Streamlit.registeredMessageListener = true\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION,\n    })\n  }\n\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    Streamlit.lastFrameHeight = height\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be serializable into JSON.\n   */\n  public static setComponentValue = (value: any): void => {\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\n  }\n\n  /** Receive a ForwardMsg from the Streamlit app */\n  private static onMessageEvent = (event: MessageEvent): void => {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`\n      )\n      args = {}\n    }\n\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\n    const dataframeArgs =\n      data[\"dfs\"] && data[\"dfs\"].length > 0\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n        : {}\n\n    args = {\n      ...args,\n      ...dataframeArgs,\n    }\n\n    const disabled = Boolean(data[\"disabled\"])\n\n    // Dispatch a render event!\n    const eventData = { disabled, args }\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\n      detail: eventData,\n    })\n    Streamlit.events.dispatchEvent(event)\n  }\n\n  private static argsDataframeToObject = (\n    argsDataframe: ArgsDataframe[]\n  ): object => {\n    const argsDataframeArrow = argsDataframe.map(\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\n    )\n    return Object.fromEntries(argsDataframeArrow)\n  }\n\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\n    const { data, index, columns } = df.data\n    return new ArrowTable(data, index, columns)\n  }\n\n  /** Post a message to the Streamlit app. */\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isStreamlitMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface ArgsDataframe {\n  key: string\n  value: ArrowDataframeProto\n}\n","/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.get(\"caption\"),\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\n          styles: styler.get(\"styles\"),\n          uuid: styler.get(\"uuid\"),\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"data\",\n        \"row\" + dataRowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ReactNode } from \"react\"\nimport { RenderData, Streamlit } from \"./streamlit\"\n\n/**\n * Props passed to custom Streamlit components.\n */\nexport interface ComponentProps {\n  /** Named dictionary of arguments passed from Python. */\n  args: any\n\n  /** The component's width. */\n  width: number\n\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean\n}\n\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\n  ComponentProps,\n  S\n> {\n  public componentDidMount(): void {\n    // After we're rendered for the first time, tell Streamlit that our height\n    // has changed.\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate(): void {\n    // After we're updated, tell Streamlit that our height may have changed.\n    Streamlit.setFrameHeight()\n  }\n}\n\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(\n  WrappedComponent: React.ComponentType<ComponentProps>\n): React.ComponentType {\n  interface WrapperProps {}\n\n  interface WrapperState {\n    renderData?: RenderData\n    componentError?: Error\n  }\n\n  class ComponentWrapper extends React.PureComponent<\n    WrapperProps,\n    WrapperState\n  > {\n    public constructor(props: WrapperProps) {\n      super(props)\n      this.state = {\n        renderData: undefined,\n        componentError: undefined,\n      }\n    }\n\n    public static getDerivedStateFromError = (\n      error: Error\n    ): Partial<WrapperState> => {\n      return { componentError: error }\n    }\n\n    public componentDidMount = (): void => {\n      // Set up event listeners, and signal to Streamlit that we're ready.\n      // We won't render the component until we receive the first RENDER_EVENT.\n      Streamlit.events.addEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n      Streamlit.setComponentReady()\n    }\n\n    public componentWillUnmount = (): void => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n    }\n\n    /**\n     * Streamlit is telling this component to redraw.\n     * We save the render data in State, so that it can be passed to the\n     * component in our own render() function.\n     */\n    private onRenderEvent = (event: Event): void => {\n      // Update our state with the newest render data\n      const renderEvent = event as CustomEvent<RenderData>\n      this.setState({ renderData: renderEvent.detail })\n    }\n\n    public render = (): ReactNode => {\n      // If our wrapped component threw an error, display it.\n      if (this.state.componentError != null) {\n        return (\n          <div>\n            <h1>Component Error</h1>\n            <span>{this.state.componentError.message}</span>\n          </div>\n        )\n      }\n\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n      if (this.state.renderData == null) {\n        return null\n      }\n\n      return (\n        <WrappedComponent\n          width={window.innerWidth}\n          disabled={this.state.renderData.disabled}\n          args={this.state.renderData.args}\n        />\n      )\n    }\n  }\n\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\n}\n","import React, {useEffect, useRef} from \"react\"\r\nimport {ComponentProps, Streamlit, withStreamlitConnection,} from \"./streamlit\"\r\nimport * as d3 from \"d3\";\r\n\r\nimport styles from './D3Component.module.css'\r\n\r\n/**\r\n * Margin between svg container and D3 graph bounds\r\n */\r\ninterface d3Margin {\r\n    top: number\r\n    bottom: number\r\n    left: number\r\n    right: number\r\n}\r\n\r\n/**\r\n * Arguments Streamlit receives from the Python side\r\n */\r\ninterface PythonArgs {\r\n    svgWidth: number\r\n    svgHeight: number\r\n    circleRadius: number\r\n    circleColor: string\r\n    margin: d3Margin\r\n    data: Array<Array<[number, number]>>\r\n}\r\n\r\n/**\r\n * Build D3 scales from data\r\n */\r\nconst buildScales = (args: PythonArgs) => {\r\n    const {svgWidth, svgHeight, margin, data}: PythonArgs = args\r\n\r\n    const xScale = d3.scaleLinear()\r\n        .domain([0, d3.max(data, (d: any) => d[0])])\r\n        .range([margin.left, svgWidth - margin.right])\r\n    const yScale = d3.scaleLinear()\r\n        .domain([0, d3.max(data, (d: any) => d[1])])\r\n        .range([svgHeight - margin.bottom, margin.top])\r\n\r\n    return [xScale, yScale]\r\n}\r\n\r\nconst D3Component = (props: ComponentProps) => {\r\n\r\n    const svgRef = useRef(null)\r\n    const {svgWidth, svgHeight, circleRadius, circleColor, margin, data}: PythonArgs = props.args\r\n    const transitionMillisec = 1200\r\n\r\n    // On mount, create group containers for circles, path and both axis\r\n    useEffect(() => {\r\n        const svgElement = d3.select(svgRef.current)\r\n        svgElement.append(\"g\").classed('circles', true)\r\n        svgElement.append(\"g\").classed('line', true)\r\n        svgElement.append(\"g\").classed('x-axis', true)\r\n        svgElement.append(\"g\").classed('y-axis', true)\r\n    }, [])\r\n\r\n    // Hook to create / update axis\r\n    useEffect(() => {\r\n        const svgElement = d3.select(svgRef.current)\r\n        const [xScale, yScale] = buildScales(props.args)\r\n\r\n        const xAxis = (g: any) => g.attr(\"transform\", `translate(0, ${svgHeight - margin.bottom})`)\r\n            .transition().duration(transitionMillisec)\r\n            .call(d3.axisBottom(xScale))\r\n        const yAxis = (g: any) => g.attr(\"transform\", `translate(${margin.left}, 0)`)\r\n            .transition().duration(transitionMillisec)\r\n            .call(d3.axisLeft(yScale))\r\n\r\n        svgElement.select(\".x-axis\").call(xAxis);\r\n        svgElement.select(\".y-axis\").call(yAxis);\r\n    })\r\n\r\n    // Hook to create / update circles\r\n    useEffect(() => {\r\n        const svgElement = d3.select(svgRef.current)\r\n        const [xScale, yScale] = buildScales(props.args)\r\n\r\n        svgElement.select(\".circles\").selectAll(\"circle\")\r\n            .data(data, (d: any) => d)\r\n            .join(\r\n                enter => (\r\n                    enter.append(\"circle\")\r\n                        // Bind each circle to [x,y] coordinate\r\n                        .classed(styles.circle, true)\r\n                        .attr(\"cx\", (d: any) => xScale(d[0]))\r\n                        .attr(\"cy\", (d: any) => yScale(d[1]))\r\n                        .attr(\"fill\", circleColor)\r\n                        .attr(\"r\", 0)\r\n                        // Transition from invisible to visible circle\r\n                        .call(el => el.transition().duration(transitionMillisec).attr(\"r\", circleRadius))\r\n                        // Add d3 mouseover to display and move tooltip around\r\n                        .on(\"mouseover\", (d: any, i, ns) => {\r\n                            const [x, y] = d3.mouse(ns[i])\r\n                            d3.select(\".tooltip\")\r\n                                .attr(\"hidden\", null)\r\n                                .style(\"left\", `${x}px`)\r\n                                .style(\"top\", `${y}px`)\r\n                                .text(`Data : ${d}`)\r\n                        })\r\n                        .on(\"mouseout\", _ => {\r\n                            d3.select(\".tooltip\").attr(\"hidden\", true)\r\n                        })\r\n                ),\r\n                update => update.call(el =>\r\n                    // If circle has not changed coordinates, maybe data scale changed\r\n                    // so transition from original position to new position\r\n                    el.transition().duration(transitionMillisec)\r\n                        .attr(\"cy\", (d: any) => yScale(d[1]))\r\n                        // NB : keep radius value, it seems in Streamlit lifecycle there are 2 renders when mounting ?\r\n                        // so circles enter and during transition to full radius rerender\r\n                        // so if r < circleRadius while update then animation breaks and circle stay small for first render\r\n                        .attr(\"r\", circleRadius)\r\n                        .attr(\"fill\", circleColor)\r\n                ),\r\n                exit => (\r\n                    // Close tooltip and remove mouse events\r\n                    exit.dispatch(\"mouseout\")\r\n                        .on(\"mouseover\", null)\r\n                        .on(\"mouseout\", null)\r\n                        // Transition from visible to invisible circle then remove entirely\r\n                        .call(el =>\r\n                            el.transition().duration(transitionMillisec / 2)\r\n                                .attr(\"r\", 0)\r\n                                .attr(\"fill\", \"tomato\")\r\n                                .style(\"opacity\", 0)\r\n                                .remove()\r\n                        )\r\n                ),\r\n            )\r\n    })\r\n\r\n    // create / update line\r\n    useEffect(() => {\r\n        const svgElement = d3.select(svgRef.current)\r\n        const [xScale, yScale] = buildScales(props.args)\r\n\r\n        const line = d3.line()\r\n            .x(d => xScale(d[0]))\r\n            .y(d => yScale(d[1]))\r\n\r\n        svgElement.select(\".line\").selectAll(\"path\")\r\n            .data([data]) // Array with 1 element keyed by index, so enters once then only updates\r\n            .join(\r\n                enter => enter.append(\"path\")\r\n                    .attr(\"d\", (d: any) => line(d))\r\n                    .attr(\"stroke\", \"black\")\r\n                    .attr(\"fill\", \"none\")\r\n                    .attr(\"opacity\", 0)\r\n                    .call(el => el.transition().duration(transitionMillisec).attr(\"opacity\", 1)),\r\n                update => update\r\n                    .attr(\"opacity\", 0.2)\r\n                    .call(el =>\r\n                        el.transition().duration(transitionMillisec)\r\n                            .attr(\"d\", (d: any) => line(d))\r\n                            .attr(\"opacity\", 1)\r\n                    ),\r\n            )\r\n    })\r\n\r\n    // Just in case, update height\r\n    useEffect(() => {\r\n        Streamlit.setFrameHeight()\r\n    }, [svgHeight])\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${styles.tooltip} tooltip`} hidden={true}/>\r\n            <svg\r\n                viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n                ref={svgRef}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStreamlitConnection(D3Component)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport D3Component from \"./D3Component\"\r\n\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <D3Component />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}